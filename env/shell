#!/usr/bin/env bash
#-*- mode: sh -*-

export PROJECT_ROOT=$(pwd)
export PATH=$PROJECT_ROOT/env:$PATH

source gs.sh

function make() {
    local args="$@"
    local name=${FUNCNAME[0]}

    if [[ $(has_help_flag $args) ]] || [[ -z $1 ]]; then
        echo "Usage: $name [sub-command]"
        echo -e "\tsub-command: \"test\" is only supported for now"
        return
    fi

    if [[ $(arg_at_index $args 0) == "test" ]]; then
        __build_tests
        __run_tests
    # elif [[ -z $(arg_at_index $args 1) ]]; then
    #     __build_main
    fi
}

function __build_tests() {
    if [[ $(has_help_flag $args) ]]; then
        echo "Usage: make test [options]"
        return
    fi

    if [[ ! -f env/build ]]; then
        mkdir -p env/build
    fi

    pushd test > /dev/null 2>&1
    local cflags="-std=c99 -pedantic-errors -fextended-identifiers -g -x c \
                  -Wno-format-contains-nul -Wno-format-security"
    local cinc="-I ../"

    for file in $(ls *.c); do
        local executable=$(basename "$file")
        executable="test_${executable%.*}"
        # echo "gcc $cflags $cinc -o \"env/build/$executable\" $file"
        gcc $cflags $cinc -o "$PROJECT_ROOT/env/build/$executable" $file
    done
    popd > /dev/null 2>&1
}

function __run_tests() {
    pushd "$PROJECT_ROOT/env/build" > /dev/null 2>&1
    for file in $(ls test_*); do
        local sourcename=$(echo $file | sed 's/test_\(.*\)/\1.c/')
        printf "${sourcename}: "
        ./$file $@
    done
    popd > /dev/null 2>&1
}
